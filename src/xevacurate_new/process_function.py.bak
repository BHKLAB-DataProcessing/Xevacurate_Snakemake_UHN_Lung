import pandas as pd
import os
import json
from datetime import datetime

# Define paths
METADATA_FILE = "/Users/guanqiaofeng/Documents/BHK/Xeva/Xevacurate_Tsao_2022/results/scan/all_file_scan.json"
OUTPUT_DIR = "/Users/guanqiaofeng/Documents/BHK/Xeva/Xevacurate_Tsao_2022/results/process"
PROCESSED_DATA_FILE = os.path.join(OUTPUT_DIR, "processed_data.pkl")
PROCESSED_TSV_FILE = os.path.join(OUTPUT_DIR, "processed_data.tsv")
QC_REPORT_FILE = os.path.join(OUTPUT_DIR, "qc_report.json")

# Ensure output directory exists
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Load metadata file
with open(METADATA_FILE, "r") as f:
    file_list = json.load(f)

# Initialize storage
all_data = []
qc_issues = []

def process_phlc_file(file_path, file_name, file_metadata):
    """
    Process a single PHLC Excel file and return structured data
    """
    try:
        df = pd.read_excel(file_path, header=None)
        print(f"\nReading file: {file_path}")
        
        # Extract metadata first
        metadata = {}
        mouse_row_idx = None
        
        for idx, row in df.iterrows():
            if pd.notna(row[0]):
                label = str(row[0]).strip()
                value = row[1] if pd.notna(row[1]) else None
                
                if "PHLC Sample" in label:
                    metadata['phlc_sample'] = str(value).strip() if value else None
                elif "Start Date" in label:
                    try:
                        metadata['start_date'] = pd.to_datetime(value).strftime('%Y-%m-%d') if pd.notna(value) else None
                        print(f"Found Start Date: {metadata['start_date']}")
                    except:
                        metadata['start_date'] = None
                elif "Start Treatment Date" in label:
                    try:
                        metadata['start_treatment_date'] = pd.to_datetime(value).strftime('%Y-%m-%d') if pd.notna(value) else None
                        print(f"Found Start Treatment Date: {metadata['start_treatment_date']}")
                    except:
                        metadata['start_treatment_date'] = None
                elif "End Date" in label:
                    try:
                        metadata['end_date'] = pd.to_datetime(value).strftime('%Y-%m-%d') if pd.notna(value) else None
                        print(f"Found End Date: {metadata['end_date']}")
                    except:
                        metadata['end_date'] = None
                elif "Mouse Number" in label:
                    mouse_row_idx = idx
                    break

        print(f"Dates found: Start={metadata.get('start_date')}, Treatment={metadata.get('start_treatment_date')}, End={metadata.get('end_date')}")

        if mouse_row_idx is None:
            raise ValueError("Could not find mouse number row")

        # Get mouse numbers (from row after "Mouse Number")
        mouse_numbers = []
        mouse_number_row = df.iloc[mouse_row_idx]  # Get the row AFTER Mouse Number
        # Start from column 1 and process all columns
        for col in range(1, len(mouse_number_row)):
            val = mouse_number_row[col]
            if pd.notna(val) and str(val).strip() != '':
                try:
                    mouse_num = int(float(str(val).strip()))
                    mouse_numbers.append((col, mouse_num))  # Store column index with mouse number
                except (ValueError, TypeError):
                    continue

        print(f"Found mouse numbers: {[num for _, num in mouse_numbers]}")

        # Get treatments (from the correct row - 2 rows after Mouse Number)
        treatments = []
        treatment_row = df.iloc[mouse_row_idx + 2]  # Changed from mouse_row_idx + 1 to mouse_row_idx + 2
        for col_idx, _ in mouse_numbers:
            val = treatment_row[col_idx]
            if pd.notna(val) and str(val).strip() != '':
                treatments.append(str(val).strip())
            else:
                treatments.append('Control')

        print(f"Found treatments: {treatments}")

        # Create ModelID from PHLC Sample
        if metadata.get('phlc_sample'):
            model_id = f"PHLC{metadata['phlc_sample']}"
        else:
            raise ValueError("Could not find PHLC Sample number")

        # Process measurements
        structured_data = []
        data_start_row = mouse_row_idx + 2

        for idx in range(data_start_row, df.shape[0]):
            day = df.iloc[idx, 0]
            if pd.notna(day) and isinstance(day, (int, float)):
                for i, (col_idx, mouse_number) in enumerate(mouse_numbers):
                    measurement = df.iloc[idx, col_idx]
                    if pd.notna(measurement) and isinstance(measurement, (int, float)):
                        sample_id = f"{model_id}_P{mouse_number}"
                        
                        row_data = {
                            'file_name': file_name,
                            'file_checksum': file_metadata.get('file_checksum', ''),
                            'file_last_modified_date': file_metadata.get('file_last_modified_date', ''),
                            'ModelID': model_id,
                            'SampleID': sample_id,
                            'tissue': 'lung',
                            'Drug': treatments[i] if i < len(treatments) else 'Control',
                            'start_date': metadata.get('start_date'),
                            'start_treatment_date': metadata.get('start_treatment_date'),
                            'end_date': metadata.get('end_date'),
                            'time': float(day),
                            'volume': float(measurement)
                        }
                        structured_data.append(row_data)

        return structured_data

    except Exception as e:
        print(f"Error processing file {file_name}: {str(e)}")
        return []

# Process each Excel file
all_processed_data = []

for file_entry in file_list:
    file_path = file_entry["file_path"]
    try:
        print(f"Processing file: {file_path}")
        processed_data = process_phlc_file(file_path, file_entry["file_name"], file_entry)
        if processed_data:  # Only add if we got data
            all_processed_data.extend(processed_data)
            print(f"Successfully processed {len(processed_data)} data points from {file_path}")
        else:
            print(f"No data extracted from {file_path}")
    except Exception as e:
        print(f"Error processing {file_path}: {str(e)}")
        qc_issues.append({"file": file_path, "issue": str(e)})

# Convert to DataFrame and save
if all_processed_data:
    processed_df = pd.DataFrame(all_processed_data)
    
    # Sort the DataFrame by file_name and SampleID
    processed_df = processed_df.sort_values(['file_name', 'SampleID'])
    
    # Save processed data
    processed_df.to_csv(PROCESSED_TSV_FILE, index=False, sep="\t")
    processed_df.to_pickle(PROCESSED_DATA_FILE)
    
    print(f"\nProcessing complete!")
    print(f"Total files attempted: {len(file_list)}")
    print(f"Files with errors: {len(qc_issues)}")
    print(f"Total data points processed: {len(processed_df)}")
    print(f"\nProcessed data saved to: {PROCESSED_TSV_FILE}")
    print(f"Processed data saved to: {PROCESSED_DATA_FILE}")
else:
    print("No data was processed successfully!")

# Save QC report
with open(QC_REPORT_FILE, "w") as f:
    json.dump(qc_issues, f, indent=4)

print(f"QC report saved to: {QC_REPORT_FILE}") 

